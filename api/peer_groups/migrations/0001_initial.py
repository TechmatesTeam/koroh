# Generated by Django 4.2.7 on 2025-10-19 18:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import peer_groups.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupAdminship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Administrator"),
                            ("moderator", "Moderator"),
                        ],
                        default="admin",
                        help_text="Administrative role",
                        max_length=20,
                        verbose_name="admin role",
                    ),
                ),
                (
                    "can_manage_members",
                    models.BooleanField(
                        default=True,
                        help_text="Can approve/remove members",
                        verbose_name="can manage members",
                    ),
                ),
                (
                    "can_moderate_content",
                    models.BooleanField(
                        default=True,
                        help_text="Can moderate posts and comments",
                        verbose_name="can moderate content",
                    ),
                ),
                (
                    "can_edit_group",
                    models.BooleanField(
                        default=False,
                        help_text="Can edit group settings",
                        verbose_name="can edit group",
                    ),
                ),
                (
                    "granted_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="granted at"),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who granted admin privileges",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_adminships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="granted by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Adminship",
                "verbose_name_plural": "Group Adminships",
                "ordering": ["-granted_at"],
            },
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active Member"),
                            ("pending", "Pending Approval"),
                            ("invited", "Invited"),
                            ("banned", "Banned"),
                            ("left", "Left Group"),
                        ],
                        default="active",
                        help_text="Current membership status",
                        max_length=20,
                        verbose_name="membership status",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("moderator", "Moderator"),
                            ("admin", "Administrator"),
                        ],
                        default="member",
                        help_text="Role within the group",
                        max_length=20,
                        verbose_name="member role",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the user joined the group",
                        verbose_name="joined at",
                    ),
                ),
                (
                    "invitation_message",
                    models.TextField(
                        blank=True,
                        help_text="Message sent with the invitation",
                        verbose_name="invitation message",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Last activity in the group",
                        verbose_name="last activity",
                    ),
                ),
                (
                    "post_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of posts by this member",
                        verbose_name="post count",
                    ),
                ),
                (
                    "comment_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of comments by this member",
                        verbose_name="comment count",
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to receive group notifications",
                        verbose_name="notifications enabled",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to receive email notifications",
                        verbose_name="email notifications",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Membership",
                "verbose_name_plural": "Group Memberships",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.CreateModel(
            name="PeerGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the peer group",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name="group name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly group identifier",
                        max_length=200,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the group purpose and goals",
                        verbose_name="group description",
                    ),
                ),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Short group tagline or mission statement",
                        max_length=200,
                        verbose_name="tagline",
                    ),
                ),
                (
                    "group_type",
                    models.CharField(
                        choices=[
                            ("industry", "Industry Group"),
                            ("skill", "Skill-based Group"),
                            ("location", "Location-based Group"),
                            ("experience", "Experience Level Group"),
                            ("interest", "Interest Group"),
                            ("company", "Company Alumni Group"),
                            ("education", "Educational Group"),
                            ("general", "General Networking"),
                        ],
                        default="general",
                        help_text="Type of peer group",
                        max_length=50,
                        verbose_name="group type",
                    ),
                ),
                (
                    "industry",
                    models.CharField(
                        blank=True,
                        help_text="Primary industry focus (if applicable)",
                        max_length=100,
                        verbose_name="industry",
                    ),
                ),
                (
                    "skills",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Skills relevant to this group",
                        verbose_name="relevant skills",
                    ),
                ),
                (
                    "experience_level",
                    models.CharField(
                        blank=True,
                        help_text="Target experience level for members",
                        max_length=50,
                        verbose_name="target experience level",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Geographic focus (if applicable)",
                        max_length=100,
                        verbose_name="location",
                    ),
                ),
                (
                    "privacy_level",
                    models.CharField(
                        choices=[
                            ("public", "Public - Anyone can join"),
                            ("private", "Private - Invitation only"),
                            ("restricted", "Restricted - Request to join"),
                        ],
                        default="public",
                        help_text="Group privacy and access control",
                        max_length=20,
                        verbose_name="privacy level",
                    ),
                ),
                (
                    "max_members",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of members (optional)",
                        null=True,
                        verbose_name="maximum members",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Group profile image",
                        null=True,
                        upload_to=peer_groups.models.group_image_upload_path,
                        verbose_name="group image",
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        help_text="Group cover/banner image",
                        null=True,
                        upload_to=peer_groups.models.group_image_upload_path,
                        verbose_name="cover image",
                    ),
                ),
                (
                    "rules",
                    models.TextField(
                        blank=True,
                        help_text="Group rules and guidelines for members",
                        verbose_name="group rules",
                    ),
                ),
                (
                    "welcome_message",
                    models.TextField(
                        blank=True,
                        help_text="Message shown to new members",
                        verbose_name="welcome message",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the group is active",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the group is featured in recommendations",
                        verbose_name="featured",
                    ),
                ),
                (
                    "member_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cached member count for performance",
                        verbose_name="member count",
                    ),
                ),
                (
                    "post_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of posts in the group",
                        verbose_name="post count",
                    ),
                ),
                (
                    "activity_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Group activity score for recommendations",
                        verbose_name="activity score",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Last activity in the group",
                        verbose_name="last activity",
                    ),
                ),
                (
                    "admins",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Group administrators",
                        related_name="admin_peer_groups",
                        through="peer_groups.GroupAdminship",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_peer_groups",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="creator",
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Group members",
                        related_name="peer_groups",
                        through="peer_groups.GroupMembership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Peer Group",
                "verbose_name_plural": "Peer Groups",
                "ordering": ["-last_activity", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GroupPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Post title", max_length=200, verbose_name="title"
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Post content", verbose_name="content"),
                ),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("discussion", "Discussion"),
                            ("question", "Question"),
                            ("announcement", "Announcement"),
                            ("resource", "Resource Share"),
                            ("event", "Event"),
                            ("job", "Job Posting"),
                        ],
                        default="discussion",
                        help_text="Type of post",
                        max_length=20,
                        verbose_name="post type",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the post is pinned to the top",
                        verbose_name="pinned",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether comments are disabled",
                        verbose_name="locked",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Post tags for categorization",
                        verbose_name="tags",
                    ),
                ),
                (
                    "like_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of likes",
                        verbose_name="like count",
                    ),
                ),
                (
                    "comment_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of comments",
                        verbose_name="comment count",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of views",
                        verbose_name="view count",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_posts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="author",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="peer_groups.peergroup",
                        verbose_name="group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Post",
                "verbose_name_plural": "Group Posts",
                "ordering": ["-is_pinned", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="groupmembership",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_memberships",
                to="peer_groups.peergroup",
                verbose_name="group",
            ),
        ),
        migrations.AddField(
            model_name="groupmembership",
            name="invited_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who invited this member (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="group_invitations_sent",
                to=settings.AUTH_USER_MODEL,
                verbose_name="invited by",
            ),
        ),
        migrations.AddField(
            model_name="groupmembership",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_memberships",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.CreateModel(
            name="GroupComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Comment content", verbose_name="content"
                    ),
                ),
                (
                    "like_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of likes",
                        verbose_name="like count",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="author",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent comment for nested replies",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="peer_groups.groupcomment",
                        verbose_name="parent comment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="peer_groups.grouppost",
                        verbose_name="post",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Comment",
                "verbose_name_plural": "Group Comments",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="groupadminship",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_adminships",
                to="peer_groups.peergroup",
                verbose_name="group",
            ),
        ),
        migrations.AddField(
            model_name="groupadminship",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_adminships",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(fields=["name"], name="peer_groups_name_c48dcb_idx"),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(fields=["slug"], name="peer_groups_slug_fc7b21_idx"),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["group_type"], name="peer_groups_group_t_3714e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["industry"], name="peer_groups_industr_9ef789_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["privacy_level"], name="peer_groups_privacy_05c72d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["is_active", "is_featured"],
                name="peer_groups_is_acti_01de1d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["created_at"], name="peer_groups_created_1675a1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["last_activity"], name="peer_groups_last_ac_870d8c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["member_count"], name="peer_groups_member__2c488f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peergroup",
            index=models.Index(
                fields=["activity_score"], name="peer_groups_activit_2e3c02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["group", "created_at"], name="peer_groups_group_i_7d93ca_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["author", "created_at"], name="peer_groups_author__cfb7dc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["post_type"], name="peer_groups_post_ty_626425_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["is_pinned", "created_at"],
                name="peer_groups_is_pinn_441326_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["like_count"], name="peer_groups_like_co_61b9a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouppost",
            index=models.Index(
                fields=["comment_count"], name="peer_groups_comment_16831a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmembership",
            index=models.Index(
                fields=["user", "status"], name="peer_groups_user_id_332361_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmembership",
            index=models.Index(
                fields=["group", "status"], name="peer_groups_group_i_a13cf9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmembership",
            index=models.Index(
                fields=["joined_at"], name="peer_groups_joined__ab0e49_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmembership",
            index=models.Index(
                fields=["last_activity"], name="peer_groups_last_ac_cb709f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmembership",
            index=models.Index(fields=["role"], name="peer_groups_role_3c60a6_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="groupmembership",
            unique_together={("user", "group")},
        ),
        migrations.AddIndex(
            model_name="groupcomment",
            index=models.Index(
                fields=["post", "created_at"], name="peer_groups_post_id_ba7527_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupcomment",
            index=models.Index(
                fields=["author", "created_at"], name="peer_groups_author__1ea16a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupcomment",
            index=models.Index(
                fields=["parent"], name="peer_groups_parent__7302a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupadminship",
            index=models.Index(
                fields=["user", "role"], name="peer_groups_user_id_f4c2d4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupadminship",
            index=models.Index(
                fields=["group", "role"], name="peer_groups_group_i_7769e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupadminship",
            index=models.Index(
                fields=["granted_at"], name="peer_groups_granted_3ffe91_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupadminship",
            unique_together={("user", "group")},
        ),
    ]

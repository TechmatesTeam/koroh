# Generated by Django 4.2.7 on 2025-10-19 16:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("companies", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Job position title",
                        max_length=200,
                        verbose_name="job title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly job identifier",
                        max_length=250,
                        verbose_name="slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed job description and responsibilities",
                        verbose_name="job description",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="Brief job summary for listings",
                        max_length=500,
                        verbose_name="job summary",
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("full_time", "Full-time"),
                            ("part_time", "Part-time"),
                            ("contract", "Contract"),
                            ("freelance", "Freelance"),
                            ("internship", "Internship"),
                            ("temporary", "Temporary"),
                        ],
                        help_text="Type of employment",
                        max_length=50,
                        verbose_name="job type",
                    ),
                ),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("entry", "Entry Level (0-2 years)"),
                            ("junior", "Junior (2-4 years)"),
                            ("mid", "Mid Level (4-7 years)"),
                            ("senior", "Senior (7-10 years)"),
                            ("lead", "Lead/Principal (10+ years)"),
                            ("executive", "Executive/C-Level"),
                        ],
                        help_text="Required experience level",
                        max_length=50,
                        verbose_name="experience level",
                    ),
                ),
                (
                    "work_arrangement",
                    models.CharField(
                        choices=[
                            ("onsite", "On-site"),
                            ("remote", "Remote"),
                            ("hybrid", "Hybrid"),
                        ],
                        default="onsite",
                        help_text="Work location arrangement",
                        max_length=50,
                        verbose_name="work arrangement",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Job location (city, state, country)",
                        max_length=200,
                        verbose_name="job location",
                    ),
                ),
                (
                    "is_remote_friendly",
                    models.BooleanField(
                        default=False,
                        help_text="Whether remote work is allowed",
                        verbose_name="remote friendly",
                    ),
                ),
                (
                    "timezone_requirements",
                    models.CharField(
                        blank=True,
                        help_text="Required timezone overlap (for remote jobs)",
                        max_length=100,
                        verbose_name="timezone requirements",
                    ),
                ),
                (
                    "salary_min",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Minimum salary amount",
                        null=True,
                        verbose_name="minimum salary",
                    ),
                ),
                (
                    "salary_max",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum salary amount",
                        null=True,
                        verbose_name="maximum salary",
                    ),
                ),
                (
                    "salary_currency",
                    models.CharField(
                        default="USD",
                        help_text="Currency code (e.g., USD, EUR)",
                        max_length=3,
                        verbose_name="salary currency",
                    ),
                ),
                (
                    "salary_period",
                    models.CharField(
                        choices=[
                            ("hourly", "Per Hour"),
                            ("daily", "Per Day"),
                            ("weekly", "Per Week"),
                            ("monthly", "Per Month"),
                            ("yearly", "Per Year"),
                        ],
                        default="yearly",
                        help_text="Salary payment period",
                        max_length=20,
                        verbose_name="salary period",
                    ),
                ),
                (
                    "equity_offered",
                    models.BooleanField(
                        default=False,
                        help_text="Whether equity/stock options are offered",
                        verbose_name="equity offered",
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        default=list,
                        help_text="List of job requirements and qualifications",
                        verbose_name="job requirements",
                    ),
                ),
                (
                    "skills_required",
                    models.JSONField(
                        default=list,
                        help_text="List of required technical skills",
                        verbose_name="required skills",
                    ),
                ),
                (
                    "skills_preferred",
                    models.JSONField(
                        default=list,
                        help_text="List of preferred/nice-to-have skills",
                        verbose_name="preferred skills",
                    ),
                ),
                (
                    "education_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Educational background requirements",
                        verbose_name="education requirements",
                    ),
                ),
                (
                    "benefits",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of job benefits and perks",
                        verbose_name="benefits",
                    ),
                ),
                (
                    "application_deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Deadline for job applications",
                        null=True,
                        verbose_name="application deadline",
                    ),
                ),
                (
                    "application_url",
                    models.URLField(
                        blank=True,
                        help_text="External URL for job applications (optional)",
                        verbose_name="external application URL",
                    ),
                ),
                (
                    "application_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email for job applications (optional)",
                        max_length=254,
                        verbose_name="application email",
                    ),
                ),
                (
                    "application_instructions",
                    models.TextField(
                        blank=True,
                        help_text="Special instructions for applicants",
                        verbose_name="application instructions",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("paused", "Paused"),
                            ("closed", "Closed"),
                            ("filled", "Filled"),
                        ],
                        default="draft",
                        help_text="Current status of the job posting",
                        max_length=20,
                        verbose_name="job status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the job is actively accepting applications",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a featured job posting",
                        verbose_name="featured",
                    ),
                ),
                (
                    "is_urgent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is an urgent hiring need",
                        verbose_name="urgent",
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        help_text="SEO meta description",
                        max_length=160,
                        verbose_name="meta description",
                    ),
                ),
                (
                    "search_keywords",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Keywords for search optimization",
                        verbose_name="search keywords",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this job was viewed",
                        verbose_name="view count",
                    ),
                ),
                (
                    "application_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of applications received",
                        verbose_name="application count",
                    ),
                ),
                (
                    "ai_match_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI-generated relevance score for recommendations",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="AI match score",
                    ),
                ),
                (
                    "ai_tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="AI-generated tags for better matching",
                        verbose_name="AI tags",
                    ),
                ),
                (
                    "posted_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the job was first posted",
                        verbose_name="posted date",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the job was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the job posting expires",
                        null=True,
                        verbose_name="expires at",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        help_text="Company posting this job",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="companies.company",
                        verbose_name="company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Job",
                "verbose_name_plural": "Jobs",
                "ordering": ["-posted_date"],
            },
        ),
        migrations.CreateModel(
            name="JobSavedByUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "saved_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the job was saved",
                        verbose_name="saved at",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Personal notes about this job",
                        verbose_name="personal notes",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saved_by_users",
                        to="jobs.job",
                        verbose_name="job",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saved_jobs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Saved Job",
                "verbose_name_plural": "Saved Jobs",
                "ordering": ["-saved_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "saved_at"],
                        name="jobs_jobsav_user_id_86ad5b_idx",
                    ),
                    models.Index(
                        fields=["job", "saved_at"], name="jobs_jobsav_job_id_12fda4_idx"
                    ),
                ],
                "unique_together": {("user", "job")},
            },
        ),
        migrations.CreateModel(
            name="JobApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("reviewing", "Under Review"),
                            ("shortlisted", "Shortlisted"),
                            ("interview", "Interview Scheduled"),
                            ("offer", "Offer Extended"),
                            ("accepted", "Offer Accepted"),
                            ("rejected", "Rejected"),
                            ("withdrawn", "Withdrawn"),
                        ],
                        default="pending",
                        help_text="Current status of the application",
                        max_length=20,
                        verbose_name="application status",
                    ),
                ),
                (
                    "cover_letter",
                    models.TextField(
                        blank=True,
                        help_text="Applicant cover letter",
                        verbose_name="cover letter",
                    ),
                ),
                (
                    "custom_responses",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Responses to custom application questions",
                        verbose_name="custom responses",
                    ),
                ),
                (
                    "ai_match_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI-calculated match score for this application",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="AI match score",
                    ),
                ),
                (
                    "ai_summary",
                    models.TextField(
                        blank=True,
                        help_text="AI-generated summary of the application",
                        verbose_name="AI summary",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Where the application came from",
                        max_length=100,
                        verbose_name="application source",
                    ),
                ),
                (
                    "applied_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the application was submitted",
                        verbose_name="applied at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the application was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the application was first reviewed",
                        null=True,
                        verbose_name="reviewed at",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="jobs.job",
                        verbose_name="job",
                    ),
                ),
                (
                    "referrer",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who referred this applicant",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="referred_applications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="referrer",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_applications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="applicant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Job Application",
                "verbose_name_plural": "Job Applications",
                "ordering": ["-applied_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="jobs_jobapp_user_id_149a27_idx"
                    ),
                    models.Index(
                        fields=["job", "status"], name="jobs_jobapp_job_id_08192b_idx"
                    ),
                    models.Index(
                        fields=["applied_at"], name="jobs_jobapp_applied_23c887_idx"
                    ),
                    models.Index(
                        fields=["ai_match_score"], name="jobs_jobapp_ai_matc_f083f9_idx"
                    ),
                    models.Index(
                        fields=["status", "applied_at"],
                        name="jobs_jobapp_status_6642d6_idx",
                    ),
                ],
                "unique_together": {("user", "job")},
            },
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(fields=["title"], name="jobs_job_title_0e1e41_idx"),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["company", "is_active"], name="jobs_job_company_11c594_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["job_type", "experience_level"],
                name="jobs_job_job_typ_33354c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(fields=["location"], name="jobs_job_locatio_8b2f8c_idx"),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["work_arrangement"], name="jobs_job_work_ar_e40516_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["salary_min", "salary_max"], name="jobs_job_salary__2892b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["posted_date"], name="jobs_job_posted__0a7770_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["status", "is_active"], name="jobs_job_status_6cd769_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["is_featured", "is_urgent"], name="jobs_job_is_feat_ce1549_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["ai_match_score"], name="jobs_job_ai_matc_b5bc9a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["expires_at"], name="jobs_job_expires_1dbc32_idx"
            ),
        ),
    ]

input {
  # Django application logs
  file {
    path => "/var/log/koroh/django.log"
    start_position => "beginning"
    codec => "json"
    type => "django"
    tags => ["django", "application"]
  }
  
  # Error logs
  file {
    path => "/var/log/koroh/errors.log"
    start_position => "beginning"
    codec => "json"
    type => "error"
    tags => ["error", "application"]
  }
  
  # Security logs
  file {
    path => "/var/log/koroh/security.log"
    start_position => "beginning"
    type => "security"
    tags => ["security", "audit"]
  }
  
  # AI services logs
  file {
    path => "/var/log/koroh/ai_services.log"
    start_position => "beginning"
    codec => "json"
    type => "ai_services"
    tags => ["ai", "services"]
  }
  
  # Celery logs
  file {
    path => "/var/log/koroh/celery.log"
    start_position => "beginning"
    codec => "json"
    type => "celery"
    tags => ["celery", "tasks"]
  }
  
  # Performance logs
  file {
    path => "/var/log/koroh/performance.log"
    start_position => "beginning"
    codec => "json"
    type => "performance"
    tags => ["performance", "monitoring"]
  }
}

filter {
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add environment information
  mutate {
    add_field => {
      "environment" => "development"
      "service" => "koroh-platform"
    }
  }
  
  # Parse security logs
  if "security" in [tags] {
    grok {
      match => { "message" => "SECURITY %{LOGLEVEL:level} %{TIMESTAMP_ISO8601:timestamp} %{DATA:module} %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }
  }
  
  # Enhance AI service logs
  if "ai" in [tags] {
    if [extra][service_type] {
      mutate {
        add_field => { "ai_service_type" => "%{[extra][service_type]}" }
      }
    }
    
    if [extra][model] {
      mutate {
        add_field => { "ai_model" => "%{[extra][model]}" }
      }
    }
    
    if [extra][duration] {
      mutate {
        add_field => { "duration_seconds" => "%{[extra][duration]}" }
        convert => { "duration_seconds" => "float" }
      }
    }
  }
  
  # Enhance performance logs
  if "performance" in [tags] {
    if [extra][method] and [extra][path] {
      mutate {
        add_field => { "http_request" => "%{[extra][method]} %{[extra][path]}" }
      }
    }
    
    if [extra][status_code] {
      mutate {
        add_field => { "http_status" => "%{[extra][status_code]}" }
        convert => { "http_status" => "integer" }
      }
    }
    
    if [extra][duration] {
      mutate {
        convert => { "[extra][duration]" => "float" }
      }
    }
  }
  
  # Enhance error logs
  if "error" in [tags] {
    if [exception] {
      mutate {
        add_field => { "error_type" => "%{[exception][type]}" }
        add_field => { "error_message" => "%{[exception][message]}" }
      }
    }
  }
  
  # Add correlation ID for request tracing
  if [extra][correlation_id] {
    mutate {
      add_field => { "correlation_id" => "%{[extra][correlation_id]}" }
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => [ "host", "path" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "koroh-logs-%{+YYYY.MM.dd}"
    template_name => "koroh-logs"
    template_pattern => "koroh-logs-*"
    template => {
      "index_patterns" => ["koroh-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "logger" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "module" => { "type" => "keyword" }
          "function" => { "type" => "keyword" }
          "line" => { "type" => "integer" }
          "type" => { "type" => "keyword" }
          "tags" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "correlation_id" => { "type" => "keyword" }
          "ai_service_type" => { "type" => "keyword" }
          "ai_model" => { "type" => "keyword" }
          "duration_seconds" => { "type" => "float" }
          "http_request" => { "type" => "keyword" }
          "http_status" => { "type" => "integer" }
          "error_type" => { "type" => "keyword" }
          "error_message" => { "type" => "text" }
        }
      }
    }
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}
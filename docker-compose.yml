version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: koroh_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - koroh_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: koroh_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - koroh_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MeiliSearch
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: koroh_meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
      MEILI_ENV: development
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "${MEILISEARCH_PORT}:7700"
    networks:
      - koroh_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: koroh_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - koroh_network

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: koroh_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - koroh_network
    depends_on:
      - postgres

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: koroh_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - koroh_network

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: koroh_node_exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - koroh_network
    restart: unless-stopped

  # Elasticsearch (Log Storage)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: koroh_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - koroh_network
    restart: unless-stopped

  # Logstash (Log Processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: koroh_logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
      - ./api/logs:/var/log/koroh
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - koroh_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: koroh_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - koroh_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: koroh_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - koroh_network
    depends_on:
      - prometheus

  # Django Backend API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: koroh_api
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MEILISEARCH_URL=${MEILISEARCH_URL}
      - MEILISEARCH_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_CORS_ALLOWED_ORIGINS=${DJANGO_CORS_ALLOWED_ORIGINS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BEDROCK_REGION=${AWS_BEDROCK_REGION}
      - AWS_BEDROCK_MODEL_ID=${AWS_BEDROCK_MODEL_ID}
      - AWS_BEDROCK_MAX_TOKENS=${AWS_BEDROCK_MAX_TOKENS}
      - AWS_BEDROCK_TEMPERATURE=${AWS_BEDROCK_TEMPERATURE}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - ./api:/app
      - media_files:/app/media
      - static_files:/app/static
    ports:
      - "${API_PORT}:8000"
    networks:
      - koroh_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery_worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: koroh_celery_worker
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MEILISEARCH_URL=${MEILISEARCH_URL}
      - MEILISEARCH_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BEDROCK_REGION=${AWS_BEDROCK_REGION}
      - AWS_BEDROCK_MODEL_ID=${AWS_BEDROCK_MODEL_ID}
      - AWS_BEDROCK_MAX_TOKENS=${AWS_BEDROCK_MAX_TOKENS}
      - AWS_BEDROCK_TEMPERATURE=${AWS_BEDROCK_TEMPERATURE}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
    volumes:
      - ./api:/app
      - media_files:/app/media
    networks:
      - koroh_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "koroh_platform", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py migrate &&
             celery -A koroh_platform worker 
             --loglevel=info 
             --concurrency=4 
             --max-tasks-per-child=1000 
             --time-limit=300 
             --soft-time-limit=240"

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: koroh_celery_beat
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - ./api:/app
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - koroh_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "manage.py", "celery_status", "--health", "--json"]
      interval: 60s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py migrate &&
             celery -A koroh_platform beat 
             --loglevel=info 
             --scheduler=django_celery_beat.schedulers:DatabaseScheduler"

  # Celery Flower (Monitoring)
  celery_flower:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: koroh_celery_flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH:-admin:admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - koroh_network
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped
    command: celery -A koroh_platform flower --port=5555

  # Next.js Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: koroh_web
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_USE_MOCK_API=${NEXT_PUBLIC_USE_MOCK_API}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NODE_ENV=development
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${WEB_PORT}:3000"
    networks:
      - koroh_network
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: koroh_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_files:/var/www/static
      - media_files:/var/www/media
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    networks:
      - koroh_network
    depends_on:
      - api
      - web

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  media_files:
  static_files:
  celery_beat_data:

networks:
  koroh_network:
    driver: bridge